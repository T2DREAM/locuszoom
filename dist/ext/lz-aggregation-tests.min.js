"use strict";!function(r,a){if("function"==typeof define&&define.amd)define(["locuszoom","raremetal.js","q"],function(e,r,t){return a(e,r,t)});else if("object"==typeof module&&module.exports)module.exports=a(require("locuszoom"),require("raremetal.js"),require("q"));else{r.LocusZoom.ext.Data||(r.LocusZoom.ext.Data={});var t=a(r.LocusZoom,r.raremetal,r.Q);Object.keys(t).forEach(function(e){r.LocusZoom.ext.Data[e]=t[e]})}}(this,function(n,u,a){var e=n.Data.Source.extend(function(e){this.parseInit(e)},"AggregationTestSourceLZ");return e.prototype.getURL=function(e,r,t){var a=e.aggregation_tests||{};r.header||(r.header={}),r.header.aggregation_genoset_id=a.genoset_id||null,r.header.aggregation_genoset_build=a.genoset_build||null,r.header.aggregation_phenoset_id=a.phenoset_id||null,r.header.aggregation_pheno=a.pheno||null,r.header.aggregation_calcs=a.calcs||{};var o=a.masks||[];return r.header.aggregation_masks=o,r.header.aggregation_mask_ids=o.map(function(e){return e.name}),this.url},e.prototype.getCacheKey=function(e,r,t){return this.getURL(e,r,t),JSON.stringify({chrom:e.chr,start:e.start,stop:e.end,genotypeDataset:r.header.aggregation_genoset_id,phenotypeDataset:r.header.aggregation_phenoset_id,phenotype:r.header.aggregation_pheno,samples:"ALL",genomeBuild:r.header.aggregation_genoset_build,masks:r.header.aggregation_mask_ids})},e.prototype.fetchRequest=function(e,r,t){var a=this.getURL(e,r,t),o=this.getCacheKey(e,r,t);return n.createCORSPromise("POST",a,o,{"Content-Type":"application/json"}).then(function(e){var r="string"==typeof e?JSON.parse(e):e;if(r.error)throw new Error(r.error);return r})},e.prototype.annotateData=function(e,r){if(!e.groups)return{groups:[],variants:[]};e.groups=e.groups.filter(function(e){return"GENE"===e.groupType});var t=u.helpers.parsePortalJSON(e),a=t[0],o=t[1];a=a.byMask(r.header.aggregation_mask_ids);var n=r.header.aggregation_calcs;if(!n||0===Object.keys(n).length)return{variants:[],groups:[],results:[]};var s=new u.helpers.PortalTestRunner(a,o,n);try{var i=s.toJSON()}catch(e){throw console.error(e),new Error("Failed to calculate aggregation test results")}var g=r.header.aggregation_masks.reduce(function(e,r){return e[r.name]=r.description,e},{});return i.data.groups.forEach(function(e){e.mask_name=g[e.mask]}),i.data},e.prototype.normalizeResponse=function(e){return e},e.prototype.combineChainBody=function(e,r){return r.body},{AggregationTestSource:e,AssocFromAggregationLZ:n.KnownDataSources.extend("AssociationLZ","AssocFromAggregationLZ",{parseInit:function(e){if(!e||!e.from)throw"Must specify the name of the source that contains association data";this.params=e.params||{},this._from=e.from},getRequest:function(e,r,t){if(r.discrete&&!r.discrete[this._from])throw self.constructor.SOURCE_NAME+" cannot be used before loading required data for: "+this._from;return a.when(JSON.parse(JSON.stringify(r.discrete[this._from].variants)))},normalizeResponse:function(e){var t=new RegExp("(?:chr)?(.+):(\\d+)_?(\\w+)?/?([^_]+)?_?(.*)?");return e.map(function(e){var r=e.variant.match(t);return{variant:e.variant,chromosome:r[1],position:+r[2],ref_allele:r[3],ref_allele_freq:1-e.altFreq,log_pvalue:-Math.log10(e.pvalue)}}).sort(function(e,r){return(e=e.variant)<(r=r.variant)?-1:r<e?1:0})}}),GeneAggregationConnectorLZ:n.KnownDataSources.extend("ConnectorSource","GeneAggregationConnectorLZ",{REQUIRED_SOURCES:["gene_ns","aggregation_ns"],combineChainBody:function(e,r){var t=this._source_name_mapping.aggregation_ns,a=this._source_name_mapping.gene_ns,o=r.discrete[t],n=r.discrete[a],s={};return o.groups.forEach(function(e){s.hasOwnProperty(e.group)||(s[e.group]=[]),s[e.group].push(e.pvalue)}),n.forEach(function(e){var r=e.gene_name,t=s[r];t&&(e.aggregation_best_pvalue=Math.min.apply(null,t))}),n}})}});
//# sourceMappingURL=lz-aggregation-tests.min.js.map
