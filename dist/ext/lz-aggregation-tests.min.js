"use strict";!function(t,r){if("function"==typeof define&&define.amd)define(["locuszoom","raremetal.js"],function(e,t){return r(e,t)});else if("object"==typeof module&&module.exports)module.exports=r(require("locuszoom"),require("raremetal.js"));else{t.LocusZoom.ext.Data||(t.LocusZoom.ext.Data={});var o=r(t.LocusZoom,t.raremetal);Object.keys(o).forEach(function(e){t.LocusZoom.ext.Data[e]=o[e]})}}(this,function(a,s){var e=a.Data.Source.extend(function(e){this.parseInit(e)},"AggregationTestSourceLZ");return e.prototype.getURL=function(e,t,r){var o=e.aggregation_tests||{};t.header||(t.header={}),t.header.aggregation_genoset_id=o.genoset_id||null,t.header.aggregation_genoset_build=o.genoset_build||null,t.header.aggregation_phenoset_id=o.phenoset_id||null,t.header.aggregation_pheno=o.pheno||null,t.header.aggregation_calcs=o.calcs||{};var n=o.masks||[];return t.header.aggregation_masks=n,t.header.aggregation_mask_ids=n.map(function(e){return e.name}),this.url},e.prototype.getCacheKey=function(e,t,r){return this.getURL(e,t,r),JSON.stringify({chrom:e.chr,start:e.start,stop:e.end,genotypeDataset:t.header.aggregation_genoset_id,phenotypeDataset:t.header.aggregation_phenoset_id,phenotype:t.header.aggregation_pheno,samples:"ALL",genomeBuild:t.header.aggregation_genoset_build,masks:t.header.aggregation_mask_ids})},e.prototype.fetchRequest=function(e,t,r){var o=this.getURL(e,t,r),n=this.getCacheKey(e,t,r);return a.createCORSPromise("POST",o,n,{"Content-Type":"application/json"}).then(function(e){var t="string"==typeof e?JSON.parse(e):e;if(t.error)throw new Error(t.error);return t})},e.prototype.annotateData=function(e,r){if(!e.groups)return{groups:[],variants:[]};e.groups=e.groups.filter(function(e){return"GENE"===e.groupType});var t=s.helpers.parsePortalJSON(e),o=t[0],n=t[1];o=o.byMask(r.header.aggregation_mask_ids);var a=r.header.aggregation_calcs;return a&&0!==Object.keys(a).length?new s.helpers.PortalTestRunner(o,n,a).toJSON().then(function(e){var t=r.header.aggregation_masks.reduce(function(e,t){return e[t.name]=t.description,e},{});return e.data.groups.forEach(function(e){e.mask_name=t[e.mask]}),e.data}).catch(function(e){throw console.error(e),new Error("Failed to calculate aggregation test results")}):{variants:[],groups:[],results:[]}},e.prototype.normalizeResponse=function(e){return e},e.prototype.combineChainBody=function(e,t){return t.body},{AggregationTestSource:e,AssocFromAggregationLZ:a.KnownDataSources.extend("AssociationLZ","AssocFromAggregationLZ",{parseInit:function(e){if(!e||!e.from)throw"Must specify the name of the source that contains association data";this.params=e.params||{},this._from=e.from},getRequest:function(e,t,r){if(t.discrete&&!t.discrete[this._from])throw self.constructor.SOURCE_NAME+" cannot be used before loading required data for: "+this._from;return Promise.resolve(JSON.parse(JSON.stringify(t.discrete[this._from].variants)))},normalizeResponse:function(e){var r=new RegExp("(?:chr)?(.+):(\\d+)_?(\\w+)?/?([^_]+)?_?(.*)?");return e.map(function(e){var t=e.variant.match(r);return{variant:e.variant,chromosome:t[1],position:+t[2],ref_allele:t[3],ref_allele_freq:1-e.altFreq,log_pvalue:-Math.log10(e.pvalue)}}).sort(function(e,t){return(e=e.variant)<(t=t.variant)?-1:t<e?1:0})}}),GeneAggregationConnectorLZ:a.KnownDataSources.extend("ConnectorSource","GeneAggregationConnectorLZ",{REQUIRED_SOURCES:["gene_ns","aggregation_ns"],combineChainBody:function(e,t){var r=this._source_name_mapping.aggregation_ns,o=this._source_name_mapping.gene_ns,n=t.discrete[r],a=t.discrete[o],s={};return n.groups.forEach(function(e){s.hasOwnProperty(e.group)||(s[e.group]=[]),s[e.group].push(e.pvalue)}),a.forEach(function(e){var t=e.gene_name,r=s[t];r&&(e.aggregation_best_pvalue=Math.min.apply(null,r))}),a}})}});
//# sourceMappingURL=lz-aggregation-tests.min.js.map
