/*! Locuszoom 0.13.0-beta.4 */
var LzAggregationTests=function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=11)}({11:function(e,t,r){"use strict";r.r(t);var n=r(3);function o(e){const t=e.Adapters.get("BaseAdapter"),r=e.Adapters.get("BaseApiAdapter"),o=e.Adapters.get("ConnectorSource");e.Adapters.add("AggregationTestSourceLZ",class extends r{getURL(e,t,r){const n=e.aggregation_tests||{};t.header||(t.header={}),t.header.aggregation_genoset_id=n.genoset_id||null,t.header.aggregation_genoset_build=n.genoset_build||null,t.header.aggregation_phenoset_id=n.phenoset_id||null,t.header.aggregation_pheno=n.pheno||null,t.header.aggregation_calcs=n.calcs||{};const o=n.masks||[];return t.header.aggregation_masks=o,t.header.aggregation_mask_ids=o.map((function(e){return e.name})),this.url}getCacheKey(e,t,r){return this.getURL(e,t,r),JSON.stringify({chrom:e.chr,start:e.start,stop:e.end,genotypeDataset:t.header.aggregation_genoset_id,phenotypeDataset:t.header.aggregation_phenoset_id,phenotype:t.header.aggregation_pheno,samples:"ALL",genomeBuild:t.header.aggregation_genoset_build,masks:t.header.aggregation_mask_ids})}fetchRequest(e,t,r){const n=this.getURL(e,t,r),o=this.getCacheKey(e,t,r);return fetch(n,{method:"POST",body:o,headers:{"Content-Type":"application/json"}}).then(e=>{if(!e.ok)throw new Error(e.statusText);return e.text()}).then((function(e){const t="string"==typeof e?JSON.parse(e):e;if(t.error)throw new Error(t.error);return t}))}annotateData(e,t){if(!e.groups)return{groups:[],variants:[]};e.groups=e.groups.filter((function(e){return"GENE"===e.groupType}));const r=n.helpers.parsePortalJSON(e);let o=r[0];const a=r[1];o=o.byMask(t.header.aggregation_mask_ids);const s=t.header.aggregation_calcs;if(!s||0===Object.keys(s).length)return{variants:[],groups:[],results:[]};return new n.helpers.PortalTestRunner(o,a,s).toJSON().then((function(e){const r=t.header.aggregation_masks.reduce((function(e,t){return e[t.name]=t.description,e}),{});return e.data.groups.forEach((function(e){e.mask_name=r[e.mask]})),e.data})).catch((function(e){throw console.error(e),new Error("Failed to calculate aggregation test results")}))}normalizeResponse(e){return e}combineChainBody(e,t){return t.body}}),e.Adapters.add("AssocFromAggregationLZ",class extends t{constructor(e){if(!e||!e.from)throw"Must specify the name of the source that contains association data";super(...arguments)}parseInit(e){super.parseInit(e),this._from=e.from}getRequest(e,t,r){if(t.discrete&&!t.discrete[this._from])throw`${this.constructor.SOURCE_NAME} cannot be used before loading required data for: ${this._from}`;return Promise.resolve(JSON.parse(JSON.stringify(t.discrete[this._from].variants)))}normalizeResponse(e){const t=new RegExp("(?:chr)?(.+):(\\d+)_?(\\w+)?/?([^_]+)?_?(.*)?");return e.map(e=>{const r=e.variant.match(t);return{variant:e.variant,chromosome:r[1],position:+r[2],ref_allele:r[3],ref_allele_freq:1-e.altFreq,log_pvalue:-Math.log10(e.pvalue)}}).sort((e,t)=>(e=e.variant)<(t=t.variant)?-1:e>t?1:0)}}),e.Adapters.add("GeneAggregationConnectorLZ",class extends o{_getRequiredSources(){return["gene_ns","aggregation_ns"]}combineChainBody(e,t){const r=this._source_name_mapping.aggregation_ns,n=this._source_name_mapping.gene_ns,o=t.discrete[r],a=t.discrete[n],s={};return o.groups.forEach((function(e){Object.prototype.hasOwnProperty.call(s,e.group)||(s[e.group]=[]),s[e.group].push(e.pvalue)})),a.forEach((function(e){const t=e.gene_name,r=s[t];r&&(e.aggregation_best_pvalue=Math.min.apply(null,r))})),a}})}"undefined"!=typeof LocusZoom&&LocusZoom.use(o),t.default=o},3:function(e,t){e.exports=raremetal}}).default;
//# sourceMappingURL=lz-aggregation-tests.min.js.map