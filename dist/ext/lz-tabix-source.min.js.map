{"version":3,"sources":["webpack://[name]/webpack/bootstrap","webpack://[name]/webpack/runtime/compat get default export","webpack://[name]/webpack/runtime/define property getters","webpack://[name]/webpack/runtime/hasOwnProperty shorthand","webpack://[name]/external \"tabix\"","webpack://[name]/./esm/ext/lz-tabix-source.js"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","tabix","install","LocusZoom","BaseAdapter","Adapters","add","init","parser_func","url_data","Error","this","parser","url_tbi","params","_overfetch","overfetch","_reader_promise","catch","state","Promise","resolve","reject","region_start","start","region_end","end","extra_amount","then","reader","fetch","chr","data","err","map","use"],"mappings":";+BACA,IAAIA,EAAsB,CCA1B,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,GCLR,EAAwB,CAACI,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3E,EAAwB,CAACM,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,4BCAlF,MAAM,EAA+BI,M,aC2CrC,SAASC,EAAQC,GACb,MAAMC,EAAcD,EAAUE,SAASV,IAAI,eA0E3CQ,EAAUE,SAASC,IAAI,iBAvDvB,cAA6BF,EACzB,UAAUG,GACN,IAAKA,EAAKC,cAAgBD,EAAKE,SAC3B,MAAM,IAAIC,MAAM,0DAEpBC,KAAKC,OAASL,EAAKC,YAGnBG,KAAKF,SAAWF,EAAKE,SACrBE,KAAKE,QAAUN,EAAKM,SAAW,GAAGF,KAAKF,eAKvC,MAAMK,EAASP,EAAKO,QAAU,GAI9B,GAHAH,KAAKG,OAASA,EACdH,KAAKI,WAAaD,EAAOE,WAAa,EAElCL,KAAKI,WAAa,GAAKJ,KAAKI,WAAa,EACzC,MAAM,IAAIL,MAAM,gFAKpBC,KAAKM,gBAAkB,cAAgBN,KAAKF,SAAUE,KAAKE,SAASK,OAAM,WACtE,MAAM,IAAIR,MAAM,4DAIxB,aAAaS,GACT,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAEzB,MAAMC,EAAeJ,EAAMK,MACrBC,EAAaN,EAAMO,IACnBC,EAAehB,KAAKI,YAAcU,EAAaF,GAE/CC,EAAQL,EAAMK,MAAQG,EACtBD,EAAMP,EAAMO,IAAMC,EACxBhB,KAAKM,gBAAgBW,MAAMC,IACvBA,EAAOC,MAAMX,EAAMY,IAAKP,EAAOE,GAAK,SAAUM,EAAMC,GAC5CA,GACAX,EAAO,IAAIZ,MAAM,qFAErBW,EAAQW,YAMxB,kBAAkBA,GAEd,OAAOA,EAAKE,IAAIvB,KAAKC,WAOR,oBAAdT,WAGPA,UAAUgC,IAAIjC,GAIlB,U","file":"ext/lz-tabix-source.min.js","sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = tabix;","/**\n * An adapter that fetches data from a remote Tabix-indexed datafile, instead of a RESTful API.\n * Requires a generic user-specified parser function.\n *\n * ### Features provided\n * * {@link module:LocusZoom_Adapters~TabixUrlSource}\n *\n * ### Loading and usage\n * The page must incorporate and load all libraries before this file can be used, including:\n * - Vendor assets\n * - LocusZoom\n * - tabix-reader (available via NPM or a related CDN)\n *\n * To use in an environment without special JS build tooling, simply load the extension file as JS from a CDN (after any dependencies):\n * ```\n * <script src=\"https://cdn.jsdelivr.net/npm/locuszoom@INSERT_VERSION_HERE/dist/ext/lz-tabix-source.min.js\" type=\"application/javascript\"></script>\n * ```\n *\n * To use with ES6 modules, the plugin must be loaded and registered explicitly before use:\n * ```\n * import LocusZoom from 'locuszoom';\n * import LzTabixSource from 'locuszoom/esm/ext/lz-tabix-source';\n * LocusZoom.use(LzTabixSource);\n * ```\n *\n * Then use the Adapter made available by this extension. For example:\n *\n * ```javascript\n * data_sources.add(\"assoc\", [\"TabixUrlSource\", {\n *     url_data: 'https://s3-bucket.example/tabix-indexed-bgzip-file.gz',\n *     parser_func: (line_of_text) => object_of_parsed_data_for_this_line,\n *     // Tabix performs region queries. If you are fetching interval data (one end outside the edge of the plot), then\n *     // \"overfetching\" can help to ensure that data partially outside the view region is retrieved\n *     // If you are fetching single-point data like association summary stats, then overfetching is unnecessary\n *     params: { overfetch: 0.25 }\n * }]);\n * ```\n *\n * @module\n */\nimport tabix from 'tabix-reader';\n\n\nfunction install(LocusZoom) {\n    const BaseAdapter = LocusZoom.Adapters.get('BaseAdapter');\n\n    /**\n     * Loads data from a remote Tabix file (if the file host has been configured with proper\n     *  CORS and Range header support). For instructions on how to configure a remote file host such as S3 or\n     *  Google Cloud storage to serve files in the manner required, see:\n     *  https://docs.cancergenomicscloud.org/docs/enabling-cross-origin-resource-sharing-cors#CORS\n     *\n     * @alias module:LocusZoom_Adapters~TabixUrlSource\n     * @see {@link module:ext/lz-tabix-source} for required extension and installation instructions\n     * @see module:LocusZoom_Adapters~BaseApiAdapter\n     * @param {function} config.parser_func A function that parses a single line of text and returns (usually) a\n     *  structured object of data fields\n     * @param {string} config.url_data The URL for the bgzipped and tabix-indexed file\n     * @param {string} [config.url_tbi] The URL for the tabix index. Defaults to `url_data` + '.tbi'\n     * @param {number} [config.params.overfetch = 0] Optionally fetch more data than is required to satisfy the\n     *  region query. (specified as a fraction of the region size, 0-1).\n     *  Useful for sources where interesting features might lie near the edges of the plot, eg BED track intervals.\n     */\n    class TabixUrlSource extends BaseAdapter {\n        parseInit(init) {\n            if (!init.parser_func || !init.url_data) {\n                throw new Error('Tabix source is missing required configuration options');\n            }\n            this.parser = init.parser_func;\n            // TODO: In the future, accept a pre-configured reader instance (as an alternative to the URL). Most useful\n            //   for UIs that want to validate the tabix file before adding it to the plot, like LocalZoom.\n            this.url_data = init.url_data;\n            this.url_tbi = init.url_tbi || `${this.url_data}.tbi`;\n\n            // In tabix mode, sometimes we want to fetch a slightly larger region than is displayed, in case a\n            //    feature is on the edge of what the tabix query would return.\n            //    Specify overfetch in units of % of total region size. (\"fetch 10% extra before and after\")\n            const params = init.params || {};\n            this.params = params;\n            this._overfetch = params.overfetch || 0;\n\n            if (this._overfetch < 0 || this._overfetch > 1) {\n                throw new Error('Overfetch must be specified as a fraction (0-1) of the requested region size');\n            }\n\n            // Assuming that the `tabix-reader` library has been loaded via a CDN, this will create the reader\n            // Since fetching the index is a remote operation, all reader usages will be via an async interface.\n            this._reader_promise = tabix.urlReader(this.url_data, this.url_tbi).catch(function () {\n                throw new Error('Failed to create a tabix reader from the provided URL');\n            });\n        }\n\n        fetchRequest(state /*, chain, fields */) {\n            return new Promise((resolve, reject) => {\n                // Ensure that the reader is fully created (and index available), then make a query\n                const region_start = state.start;\n                const region_end = state.end;\n                const extra_amount = this._overfetch * (region_end - region_start);\n\n                const start = state.start - extra_amount;\n                const end = state.end + extra_amount;\n                this._reader_promise.then((reader) => {\n                    reader.fetch(state.chr, start, end, function (data, err) {\n                        if (err) {\n                            reject(new Error('Could not read requested region. This may indicate an error with the .tbi index.'));\n                        }\n                        resolve(data);\n                    });\n                });\n            });\n        }\n\n        normalizeResponse(data) {\n            // Parse the data from lines of text to objects\n            return data.map(this.parser);\n        }\n    }\n\n    LocusZoom.Adapters.add('TabixUrlSource', TabixUrlSource);\n}\n\nif (typeof LocusZoom !== 'undefined') {\n    // Auto-register the plugin when included as a script tag. ES6 module users must register via LocusZoom.use()\n    // eslint-disable-next-line no-undef\n    LocusZoom.use(install);\n}\n\n\nexport default install;\n\n"],"sourceRoot":""}